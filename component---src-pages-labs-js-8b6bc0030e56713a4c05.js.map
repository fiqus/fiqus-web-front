{"version":3,"file":"component---src-pages-labs-js-8b6bc0030e56713a4c05.js","mappings":"yIAIMA,EAAUC,EAAQ,MAClBC,EAAaD,EAAQ,MAarBE,EAAkBC,EAAAA,GAAAA,IAAAA,WAAH,0EAAGA,CAAH,6NACHC,EAAAA,GAAAA,OAAAA,YAMA,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,aACbH,EAAAA,GAAAA,YAAAA,GAIf,SAAAC,GACE,GAAsB,YAAlBA,EAAMG,QACN,MAAM,mGAOhBC,EAAgBN,EAAAA,GAAAA,IAAAA,WAAH,wEAAGA,CAAH,uIAKMC,EAAAA,GAAAA,YAAAA,GAMnBM,EAAgBP,EAAAA,GAAAA,IAAAA,WAAH,wEAAGA,CAAH,6MAOMC,EAAAA,GAAAA,YAAAA,GAQnBO,EAAiBR,EAAAA,GAAAA,IAAAA,WAAH,yEAAGA,CAAH,6GAEKC,EAAAA,GAAAA,YAAAA,GAKf,SAAAC,GACE,GAAsB,YAAlBA,EAAMG,QACN,MAAM,4DAOhBI,EAAwBT,EAAAA,GAAAA,GAAAA,WAAH,gFAAGA,CAAH,wIAERC,EAAAA,GAAAA,WAAAA,QAEN,SAAAC,GAAK,OAAIA,EAAMC,KAAKO,SAE3B,SAAAR,GACE,GAAsB,YAAlBA,EAAMG,QACN,MAAM,gBAAkBJ,EAAAA,GAAAA,WAAAA,QAAxB,MAGaA,EAAAA,GAAAA,YAAAA,GAEf,SAAAC,GACE,GAAsB,YAAlBA,EAAMG,QACN,MAAM,0BAKhBM,EAAqBX,EAAAA,GAAAA,GAAAA,WAAH,6EAAGA,CAAH,mKAELC,EAAAA,GAAAA,WAAAA,MAEN,SAAAC,GAAK,OAAIA,EAAMC,KAAKO,QAERT,EAAAA,GAAAA,YAAAA,GAKnB,SAAAC,GACE,GAAsB,YAAlBA,EAAMG,QACN,MAAM,yBAKZO,EAA2BZ,EAAAA,GAAAA,EAAAA,WAAH,mFAAGA,CAAH,8DAGXC,EAAAA,GAAAA,WAAAA,SACN,SAAAC,GAAK,OAAIA,EAAMC,KAAKO,SAI3BG,EAAmBb,EAAAA,GAAAA,IAAAA,WAAH,2EAAGA,CAAH,4GAEGC,EAAAA,GAAAA,YAAAA,EAGAA,EAAAA,GAAAA,YAAAA,GAGnB,SAAAC,GACE,GAAsB,YAAlBA,EAAMG,QACN,MAAM,kDACeJ,EAAAA,GAAAA,YAAAA,EADrB,2FAIqBA,EAAAA,GAAAA,YAAAA,EAJrB,2EAWNa,EAAyBd,EAAAA,GAAAA,IAAAA,WAAH,iFAAGA,CAAH,+FAItB,SAAAE,GACE,GAAsB,YAAlBA,EAAMG,QACN,MAAM,sBAGOJ,EAAAA,GAAAA,YAAAA,GAiDzB,IA3CsB,SAACC,GACnB,IAAMa,EAAgB,SAACZ,GACnB,OAAQA,GACJ,IAAK,UACD,MAAO,CACHC,WAAaH,EAAAA,GAAAA,OAAAA,YACbS,MAAQT,EAAAA,GAAAA,OAAAA,cACRe,MAAOlB,GAGf,IAAK,OAOL,QACI,MAAO,CACHM,WAAaH,EAAAA,GAAAA,OAAAA,WACbS,MAAQT,EAAAA,GAAAA,OAAAA,WACRe,MAAQpB,KAKxB,OACI,gBAACG,EAAD,CAAiBI,KAAMY,EAAcb,EAAMG,UACvC,gBAACC,EAAD,KACI,gBAACC,EAAD,KACI,gBAACI,EAAD,CAAoBR,KAAMY,EAAcb,EAAMG,UAAWH,EAAMe,OAC/D,gBAACH,EAAD,CAAwBI,IAAKH,EAAcb,EAAMG,SAASW,MAAMG,UAChE,gBAACV,EAAD,CAAuBJ,QAASH,EAAMG,QAASF,KAAMY,EAAcb,EAAMG,UAAWH,EAAMkB,UAC1F,gBAACR,EAAD,CAA0BT,KAAMY,EAAcb,EAAMG,UAApD,IAAgEH,EAAMmB,YAAtE,MAEJ,gBAACb,EAAD,CAAgBH,QAASH,EAAMG,SAC3B,gBAACQ,EAAD,CAAkBR,QAASH,EAAMG,QAASa,IAAKH,EAAcb,EAAMG,SAASW,MAAMG,e,0CCpMhGG,EAAgBtB,EAAAA,GAAAA,IAAAA,WAAH,8DAAGA,CAAH,6DAKbuB,EAAUvB,EAAAA,GAAAA,IAAAA,WAAH,wDAAGA,CAAH,wHAEE,SAAAE,GAAK,OAAIA,EAAMC,KAAKqB,WAGhB,SAAAtB,GAAK,OAAIA,EAAMC,KAAKsB,cACf,SAAAvB,GAAK,OAAIA,EAAMC,KAAKC,cAC/B,SAAAF,GAAK,OAAIA,EAAMC,KAAKO,SA4CjC,IAzCa,SAACR,GAEV,IAAMwB,EAAe,SAACvB,GAClB,OAAQA,GACJ,IAAK,OACD,MAAO,CACHC,WAAaF,EAAMD,OAAO0B,OAAOC,WACjCH,WAAavB,EAAMD,OAAOwB,WAAWI,QACrCnB,MAAQR,EAAMD,OAAO0B,OAAOG,cAC5BN,QAAU,YAGlB,IAAK,WACD,MAAO,CACHpB,WAAaF,EAAMD,OAAO0B,OAAOI,YACjCN,WAAavB,EAAMD,OAAOwB,WAAWO,OACrCtB,MAAQR,EAAMD,OAAO0B,OAAOM,gBAC5BT,QAAU,YAGlB,QACI,MAAO,CACHpB,WAAaF,EAAMD,OAAO0B,OAAOC,WACjCH,WAAavB,EAAMD,OAAOwB,WAAWI,QACrCnB,MAAQR,EAAMD,OAAO0B,OAAOG,cAC5BN,QAAU,cAK1B,OACI,gBAACF,EAAD,CAAeY,KAAMhC,EAAMgC,KAAM/B,KAAMD,EAAMiC,UACxCjC,EAAMgC,KAAKE,KAAI,SAACC,GACb,OACI,gBAACd,EAAD,CAAUe,IAAOD,EAAMlC,KAAQuB,EAAaxB,EAAMiC,UAAWlC,OAAQC,EAAMD,QAAQ,yBAAKoC,U,yIC5CtGE,EAAa1C,EAAQ,MACrBI,EAASuC,EAAAA,GAETC,EAAczC,EAAAA,GAAAA,IAAAA,WAAH,2DAAGA,CAAH,uKAOQC,EAAOyC,YAAYC,GAQtCC,GAAW5C,EAAAA,EAAAA,IAAO6C,EAAAA,GAAV,mEAAG7C,CAAH,2IAIWC,EAAOyC,YAAYI,EAGnB7C,EAAOyC,YAAYC,GAItCI,EAAW/C,EAAAA,GAAAA,GAAAA,WAAH,wDAAGA,CAAH,oEAGDC,EAAO0B,OAAOqB,WAGrBC,EAAgBjD,EAAAA,GAAAA,EAAAA,WAAF,8DAAEA,CAAF,gKAKPC,EAAO0B,OAAOuB,WACIjD,EAAO0B,OAAOC,WACpB3B,EAAOyC,YAAYC,GAItCQ,EAAYnD,EAAAA,GAAAA,GAAAA,WAAH,yDAAGA,CAAH,qFAIIC,EAAOwB,WAAWO,OACxB/B,EAAO0B,OAAOG,eAErBR,EAAiBtB,EAAAA,GAAAA,IAAAA,WAAJ,6DAAIA,CAAJ,sHAGYC,EAAO0B,OAAOC,WACpB3B,EAAOyC,YAAYC,GAItCS,EAAgBpD,EAAAA,GAAAA,IAAAA,WAAJ,4DAAIA,CAAJ,kCAIZqD,GAAarD,EAAAA,EAAAA,IAAOsD,EAAAA,GAAX,oEAAItD,CAAJ,kGAIUC,EAAOyC,YAAYC,GAItCY,GAAWvD,EAAAA,EAAAA,IAAOsD,EAAAA,GAAX,kEAAItD,CAAJ,kGAIYC,EAAOyC,YAAYC,GA+C5C,EA1CoB,SAACzC,GACjB,IAAMsD,EAAMtD,EAAMuD,QACZC,GAAOC,EAAAA,EAAAA,WAEb,OACI,gBAAClB,EAAD,KACI,gBAACG,EAAD,CACIgB,MAAO1D,EAAM2D,SACbC,IAAKJ,EAAKK,cAAc,CAACC,GAAI,iCAAmCR,EAAIS,YAAYhD,QAEpF,gBAAC8B,EAAD,KAAWS,EAAIS,YAAYhD,OAC3B,gBAACgC,EAAD,KAAiBO,EAAIU,SACrB,gBAACf,EAAD,KAAYO,EAAKK,cAAc,CAACC,GAAI,8BACpC,gBAAC1C,EAAD,KACI,gBAAC6C,EAAA,EAAD,CAAMlE,OAAQC,EAAMD,OAAQE,KAAK,OAAO+B,KAAMsB,EAAIS,YAAY/B,QAElE,gBAACkB,EAAD,KACMlD,EAAMuD,QAAQQ,YAAYG,SACxB,gBAACb,EAAD,CACIpD,KAAK,aACLkE,MAAOpE,EACPqE,QAAM,EACNC,KAAMrE,EAAMuD,QAAQQ,YAAYG,QAChCI,QAASd,EAAKK,cAAc,CAACC,GAAI,mCAGvC9D,EAAMuD,QAAQQ,YAAYQ,QACxB,gBAACpB,EAAD,CACIlD,KAAK,aACLkE,MAAOpE,EACPqE,QAAM,EACNpD,IAAKqB,EAAWpB,QAChBsD,QAAQ,EACRF,KAAMrE,EAAMuD,QAAQQ,YAAYQ,OAChCD,QAASd,EAAKK,cAAc,CAACC,GAAI,sC,SCpHnDU,EAAqB1E,EAAAA,GAAAA,IAAAA,WAAH,mEAAGA,CAAH,kLAIDC,EAAAA,GAAAA,YAAAA,EAGAA,EAAAA,GAAAA,YAAAA,IAIjB0E,EAAiB3E,EAAAA,GAAAA,IAAAA,WAAH,+DAAGA,CAAH,wLAMGC,EAAAA,GAAAA,YAAAA,GAQjB2E,EAAa5E,EAAAA,GAAAA,GAAAA,WAAH,2DAAGA,CAAH,qMAGCC,EAAAA,GAAAA,WAAAA,OAGNA,EAAAA,GAAAA,OAAAA,WAEYA,EAAAA,GAAAA,YAAAA,GA2CvB,EApCa,YAA6C,IAAf4E,EAAc,EAA1CrC,KAAOsC,kBAAqBD,MACnCnB,GAAOC,EAAAA,EAAAA,WAEPoB,EAAOF,EAAMzC,KACjB,SAAA4C,GACE,IAAMnB,EAAWmB,EAAKC,KAAKhB,YAAYjD,MAAMkE,gBAAgBtB,MACvDuB,EAAUH,EAAKC,KAAKhB,YAAYkB,QAEtC,GAAMA,GAA0B,MAAfzB,EAAK0B,SAAqBD,GAA0B,MAAfzB,EAAK0B,OACzD,OACE,gBAACC,EAAD,CAAK/C,IAAK0C,EAAKC,KAAKhB,YAAYD,GAAIH,SAAUA,EAAU5D,OAAQA,EAAAA,GAAQwD,QAASuB,EAAKC,UAM9F,OACE,gBAAC,EAAAK,SAAD,KACE,gBAACC,EAAA,EAAD,CACElF,QAAQ,OACRY,MAAOyC,EAAKK,cAAc,CAACC,GAAI,eAC/B5C,SAAUsC,EAAKK,cAAc,CAACC,GAAI,kBAClC3C,YAAaqC,EAAKK,cAAc,CAACC,GAAI,mBAEvC,gBAACU,EAAD,KACE,gBAACC,EAAD,KACE,gBAACC,EAAD,KAAalB,EAAKK,cAAc,CAACC,GAAI,0BACpCe,O,4BC3EX,UAAe,IAA0B,uD,4BCAzC,UAAe,IAA0B","sources":["webpack://fiqus-web/./src/components/common/SectionHeader.js","webpack://fiqus-web/./src/components/common/Tags.js","webpack://fiqus-web/./src/components/modules/Lab.js","webpack://fiqus-web/./src/pages/labs.js","webpack://fiqus-web/./src/images/illustrations/cultura.svg","webpack://fiqus-web/./src/images/illustrations/labs.svg"],"sourcesContent":["import React from 'react';\r\nimport {styles} from '../../content/content.json'\r\nimport styled from 'styled-components'\r\n\r\nconst iluLabs = require('../../images/illustrations/labs.svg');\r\nconst iluCultura = require('../../images/illustrations/cultura.svg');\r\n\r\n\r\nconst setSharedStyles = (type) => {\r\n    return `\r\n        font-size: ${type.fontSize};\r\n        font-weight: ${type.fontWeight};\r\n        color: ${type.color };\r\n        background-color: ${type.background};\r\n        border-color: ${type.borderColor};\r\n        box-shadow:  0px 4px 0px ${type.boxShadow};\r\n    `\r\n} \r\nconst HeaderContainer = styled.div`\r\n    background: ${styles.colors.greenLight};\r\n    padding-bottom: 80px;\r\n    display: flex; \r\n    justify-content: center;\r\n    padding: 40px 20px 50px 20px;\r\n    margin-bottom: 0px;\r\n    background: ${props => props.type.background};\r\n    @media (min-width: ${styles.breakpoints.m}px) {\r\n        margin-bottom: 0px;\r\n        padding-top: 55px;\r\n        padding-bottom: 79px;\r\n        ${props => {\r\n            if (props.section === 'cultura') {\r\n                return  `max-width: 429px;\r\n                margin-right: 17px;\r\n                padding-bottom: 45px;`\r\n            }\r\n        }}\r\n    }\r\n`\r\nconst HeaderWrapper = styled.div`\r\n    max-width: 946px;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    @media (min-width: ${styles.breakpoints.m}px) {\r\n        flex-direction: row;\r\n        justify-content: center;        \r\n    }\r\n\r\n`\r\nconst InfoContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 100%;\r\n    max-width: 320px;\r\n    margin: auto;\r\n    @media (min-width: ${styles.breakpoints.m}px) {\r\n        flex-basis: 50%;\r\n        max-width: 463px;\r\n        align-items: flex-start;\r\n        margin: 0;\r\n        margin-right: auto;\r\n    }\r\n`\r\nconst ImageContainer = styled.div`\r\n    display: none;\r\n    @media (min-width: ${styles.breakpoints.m}px) {\r\n        display: block;\r\n        flex-basis: 50%;\r\n        max-width: 463px;\r\n        text-align: right;\r\n        ${props => {\r\n            if (props.section === 'cultura') {\r\n                return  `max-width: 429px;\r\n                margin-right: 17px;`\r\n            }\r\n        }}\r\n    }\r\n    \r\n`\r\nconst SectionHeaderSubtitle = styled.h2`\r\n    font-size: 1.44em;\r\n    font-weight: ${styles.fontWeight.medium};\r\n    line-height: 34px;\r\n    color: ${props => props.type.color};\r\n    margin-bottom: 25px;\r\n    ${props => {\r\n        if (props.section === 'cultura') {\r\n            return  `font-weight: ${styles.fontWeight.regular};`\r\n        }\r\n    }}\r\n    @media (min-width: ${styles.breakpoints.m}px) {\r\n        margin-bottom: 35px;\r\n        ${props => {\r\n            if (props.section === 'cultura') {\r\n                return  `margin-bottom: 25px;`\r\n            }\r\n        }}\r\n    }\r\n`\r\nconst SectionHeaderTitle = styled.h1`\r\n    font-size: 2.38em;\r\n    font-weight: ${styles.fontWeight.bold};\r\n    text-align: center;\r\n    color: ${props => props.type.color};\r\n    margin-bottom: 25px;\r\n    @media (min-width: ${styles.breakpoints.m}px) {\r\n        font-size: 3em;\r\n        text-align: left;\r\n        margin-bottom: 30px;\r\n        \r\n    ${props => {\r\n        if (props.section === 'cultura') {\r\n            return  `margin-bottom: 8px;`\r\n        }\r\n    }}\r\n    }\r\n`\r\nconst SectionHeaderDescription = styled.p`\r\n    font-size: 1em;\r\n    line-height: 26px;\r\n    font-weight: ${styles.fontWeight.regular};\r\n    color: ${props => props.type.color};\r\n    \r\n`\r\n\r\nconst SectionHeaderImg = styled.img`\r\n    margin-top: 83px;\r\n    @media (min-width: ${styles.breakpoints.m}px) {\r\n        max-width: 350px;\r\n    }\r\n    @media (min-width: ${styles.breakpoints.l}px) {\r\n        max-width: 463px;\r\n    }\r\n    ${props => {\r\n        if (props.section === 'cultura') {\r\n            return  `margin-top: 0;\r\n            @media (min-width: ${styles.breakpoints.m}px) {\r\n                max-width: 350px;\r\n            }\r\n            @media (min-width: ${styles.breakpoints.l}px) {\r\n                max-width: 429px;\r\n            }\r\n            `\r\n        }\r\n    }}\r\n`\r\nconst SectionHeaderImgMobile = styled.img`\r\n    width: 100%;\r\n    max-width: 307px;\r\n    margin-bottom: 27px;\r\n    ${props => {\r\n        if (props.section === 'cultura') {\r\n            return  `max-width: 320px;`\r\n        }\r\n    }}\r\n    @media (min-width: ${styles.breakpoints.m}px) {\r\n        display: none;\r\n    }\r\n    \r\n`\r\n\r\nconst SectionHeader = (props) => {\r\n    const getHeadStyles = (type) =>{\r\n        switch (type) {\r\n            case \"cultura\" : \r\n                return {\r\n                    background : styles.colors.purpleLight,\r\n                    color : styles.colors.purplePrimary,\r\n                    image: iluCultura,\r\n                 }\r\n            break\r\n            case \"labs\" : \r\n                return {\r\n                    background : styles.colors.greenLight,\r\n                    color : styles.colors.darkMainBg,\r\n                    image : iluLabs\r\n                 }\r\n            break\r\n            default : \r\n                return {\r\n                    background : styles.colors.greenLight,\r\n                    color : styles.colors.darkMainBg,\r\n                    image : iluLabs\r\n                }\r\n        }   \r\n    }\r\n\r\n    return (\r\n        <HeaderContainer type={getHeadStyles(props.section)}>\r\n            <HeaderWrapper>\r\n                <InfoContainer>\r\n                    <SectionHeaderTitle type={getHeadStyles(props.section)}>{props.title}</SectionHeaderTitle>\r\n                    <SectionHeaderImgMobile src={getHeadStyles(props.section).image.default}></SectionHeaderImgMobile>\r\n                    <SectionHeaderSubtitle section={props.section} type={getHeadStyles(props.section)}>{props.subtitle}</SectionHeaderSubtitle>\r\n                    <SectionHeaderDescription type={getHeadStyles(props.section)}> {props.description} </SectionHeaderDescription>\r\n                </InfoContainer>\r\n                <ImageContainer section={props.section}>\r\n                    <SectionHeaderImg section={props.section} src={getHeadStyles(props.section).image.default}></SectionHeaderImg>\r\n                </ImageContainer>\r\n            </HeaderWrapper>\r\n        </HeaderContainer>\r\n    );\r\n};\r\n\r\nexport default SectionHeader;","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst TagsContainer = styled.div`\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    flex-wrap: wrap;\r\n`\r\nconst TagItem = styled.div`\r\n    margin: 0 6px 8px 0px;\r\n    padding: ${props => props.type.padding };\r\n    border-radius: 10px;\r\n    font-size: 14px;\r\n    font-weight: ${props => props.type.fontWeight };\r\n    background-color: ${props => props.type.background };\r\n    color: ${props => props.type.color };\r\n`\r\n\r\nconst Tags = (props) => {\r\n\r\n    const getTagStyles = (type) =>{\r\n        switch (type) {\r\n            case \"labs\" : \r\n                return {\r\n                    background : props.styles.colors.greenLight, \r\n                    fontWeight : props.styles.fontWeight.regular, \r\n                    color : props.styles.colors.ultraDarkGrey,\r\n                    padding : '9px 14px'\r\n                 }\r\n            break\r\n            case \"services\" : \r\n                return {\r\n                    background : props.styles.colors.purpleLight, \r\n                    fontWeight : props.styles.fontWeight.medium, \r\n                    color : props.styles.colors.purpleSecondary,\r\n                    padding : '8px 14px'\r\n                }\r\n            break\r\n            default : \r\n                return {\r\n                    background : props.styles.colors.greenLight, \r\n                    fontWeight : props.styles.fontWeight.regular, \r\n                    color : props.styles.colors.ultraDarkGrey,\r\n                    padding : '8px 14px'\r\n                }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <TagsContainer tags={props.tags} type={props.tagsType}>\r\n            {props.tags.map((tag) => {\r\n                return (\r\n                    <TagItem  key = {tag}  type = {getTagStyles(props.tagsType)} styles={props.styles}><p>{ tag }</p></TagItem>\r\n                )}) \r\n            }\r\n        </TagsContainer>\r\n    );\r\n};\r\n\r\nexport default Tags;","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport data from '../../content/content.json'\r\nimport Img from \"gatsby-image\"\r\nimport Tags from '../common/Tags'\r\nimport { useIntl, Link } from \"gatsby-plugin-react-intl\"\r\nimport Button from '../common/Button'\r\n\r\nconst githubIcon = require('../../images/icon_github.svg');\r\nconst styles = data.styles\r\n\r\nconst CaseWrapper = styled.div`\r\n    margin-bottom: 40px;\r\n    max-width: 351px;\r\n    flex-basis: 100%;\r\n    &:last-of-type {\r\n        margin-bottom: 96px;\r\n    }\r\n    @media (min-width: ${styles.breakpoints.l}px) {\r\n        flex-basis: 33%;\r\n        &:last-of-type {\r\n            margin-bottom: 75px;\r\n        }\r\n    }\r\n` \r\n\r\nconst LabImage = styled(Img)`\r\n    border-radius: 6px;\r\n    margin-bottom: 15px;\r\n    height: 182px;\r\n    @media (min-width: ${styles.breakpoints.m}px) {\r\n        margin-bottom: 20px;\r\n    }\r\n    @media (min-width: ${styles.breakpoints.l}px) {\r\n        height: 208px;\r\n    }\r\n`\r\nconst LabTitle = styled.h3`\r\n    font-size: 2.11em;\r\n    line-height: 42px;\r\n    color: ${styles.colors.greenMain};\r\n    margin-bottom: 15px;    \r\n`\r\nconst LabDescription =styled.p`\r\n    font-size: 1em;\r\n    line-height: 1.22em;\r\n    padding-bottom: 22px;\r\n    margin-bottom: 20px;\r\n    color: ${styles.colors.darkMainBg};\r\n    border-bottom: 2px solid ${styles.colors.greenLight};\r\n    @media (min-width: ${styles.breakpoints.l}px) {\r\n        line-height: 1.44em;\r\n    }\r\n`\r\nconst TagsTitle = styled.h4`\r\n    margin-bottom: 20px;\r\n    margin-bottom: 22px;\r\n    font-size: .88em;\r\n    font-weight: ${styles.fontWeight.medium};\r\n    color: ${styles.colors.ultraDarkGrey};\r\n`\r\nconst TagsContainer =  styled.div`\r\n    padding-bottom: 13px;\r\n    margin-bottom: 20px;\r\n    border-bottom: 2px solid ${styles.colors.greenLight};\r\n    @media (min-width: ${styles.breakpoints.l}px) {\r\n        padding-bottom: 13px;\r\n    }\r\n`\r\nconst BtnContainer =  styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`\r\nconst BtnGithub =  styled(Button)`\r\n    font-size: .88em;\r\n    padding-left: 10px;\r\n    padding-right: 10px;\r\n    @media (min-width: ${styles.breakpoints.l}px) {\r\n        font-size: 1em;\r\n    }\r\n`\r\nconst BtnSite =  styled(Button)`\r\n    font-size: .88em;\r\n    padding-left: 10px;\r\n    padding-right: 10px;\r\n    @media (min-width: ${styles.breakpoints.l}px) {\r\n        font-size: 1em;\r\n    }\r\n`\r\n\r\nconst SuccessCase = (props) => {\r\n    const lab = props.labData\r\n    const intl = useIntl();\r\n\r\n    return (\r\n        <CaseWrapper>\r\n            <LabImage\r\n                fluid={props.fluidImg}\r\n                alt={intl.formatMessage({id: \"casos_de_exito.imageAltLine1\"}) + lab.frontmatter.title }\r\n            />\r\n            <LabTitle>{lab.frontmatter.title}</LabTitle>\r\n            <LabDescription>{lab.excerpt}</LabDescription>\r\n            <TagsTitle>{intl.formatMessage({id: \"casos_de_exito.tagsTitle\"})}</TagsTitle>\r\n            <TagsContainer>\r\n                <Tags styles={props.styles} type=\"labs\" tags={lab.frontmatter.tags}></Tags>\r\n            </TagsContainer>\r\n            <BtnContainer>\r\n                { props.labData.frontmatter.website && \r\n                    <BtnSite\r\n                        type='btnLabeled'\r\n                        theme={styles}\r\n                        isLink\r\n                        href={props.labData.frontmatter.website}\r\n                        btnText={intl.formatMessage({id: \"casos_de_exito.btnTextVerMas\"})}\r\n                    />\r\n                }\r\n                { props.labData.frontmatter.github && \r\n                    <BtnGithub\r\n                        type='btnLabeled'\r\n                        theme={styles}\r\n                        isLink\r\n                        src={githubIcon.default}\r\n                        github={true}\r\n                        href={props.labData.frontmatter.github}\r\n                        btnText={intl.formatMessage({id: \"casos_de_exito.btnTextGithub\"})}\r\n                    />\r\n                }\r\n            </BtnContainer>\r\n        </CaseWrapper>\r\n    );\r\n};\r\n\r\nexport default SuccessCase;","import React, {Fragment} from \"react\"\r\nimport { graphql } from 'gatsby';\r\nimport styled from 'styled-components'\r\nimport Lab from \"../components/modules/Lab\"\r\nimport { useIntl, Link } from \"gatsby-plugin-react-intl\"\r\nimport SectionHeader from \"../components/common/SectionHeader\"\r\nimport {styles} from '../content/content.json'\r\n\r\nconst PostsMainContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding: 30px 20px 109px 20px;\r\n  @media (min-width: ${styles.breakpoints.m}px) {\r\n    padding: 52px 20px 163px 20px;\r\n  }\r\n  @media (min-width: ${styles.breakpoints.xl}px) {\r\n    padding: 52px 0px 168px 0px;\r\n  }\r\n`\r\nconst PostsContainer = styled.div`\r\n  display: inline-flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  gap: 10px;\r\n  padding: 0;\r\n  @media (min-width: ${styles.breakpoints.m}px) {\r\n    max-width: 1140px;\r\n    justify-content: flex-start;\r\n    margin: auto;\r\n    gap: 36px;\r\n    padding: 0;\r\n  };\r\n`\r\nconst PostsTitle = styled.h2`\r\n  flex-basis: 100%;\r\n  font-size: 1.72em;\r\n  font-weight: ${styles.fontWeight.medium};\r\n  line-height: 37px;\r\n  text-align: center;\r\n  color: ${styles.colors.darkMainBg};\r\n  margin-bottom: 20px;\r\n  @media (min-width: ${styles.breakpoints.m}px) {\r\n    font-size: 2.83em;\r\n    line-height: 59px;\r\n    margin-bottom: 24px;\r\n  }\r\n`\r\n\r\nconst Labs = ({data: {allMarkdownRemark: { edges }}}) => {\r\n  const intl = useIntl();\r\n\r\n  const Labs = edges.map( \r\n    edge => {\r\n      const fluidImg = edge.node.frontmatter.image.childImageSharp.fluid \r\n      const english = edge.node.frontmatter.english;\r\n\r\n      if ( (english && intl.locale == 'en') || (!english && intl.locale == 'es')) {\r\n        return(\r\n          <Lab key={edge.node.frontmatter.id} fluidImg={fluidImg} styles={styles} labData={edge.node}></Lab>\r\n        )\r\n      }      \r\n    }\r\n  )\r\n  \r\n  return ( \r\n    <Fragment>\r\n      <SectionHeader \r\n        section=\"labs\"\r\n        title={intl.formatMessage({id: 'labs.title'})}\r\n        subtitle={intl.formatMessage({id: 'labs.subtitle'})}\r\n        description={intl.formatMessage({id: 'labs.content'})}\r\n      />\r\n      <PostsMainContainer>\r\n        <PostsContainer>\r\n          <PostsTitle>{intl.formatMessage({id: 'casos_de_exito.title'})}</PostsTitle>\r\n          {Labs}\r\n        </PostsContainer>\r\n      </PostsMainContainer>\r\n    \r\n    </Fragment>\r\n  )\r\n\r\n};\r\n\r\nexport default Labs;\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }, filter: {frontmatter: {type: {eq: \"lab\"}}}) {\r\n      edges {\r\n        node {\r\n          id\r\n          excerpt(pruneLength: 250)\r\n          frontmatter {\r\n            type\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            id\r\n            title\r\n            tags\r\n            image{\r\n              childImageSharp {\r\n                fluid(maxWidth: 800) {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n            website\r\n            github\r\n            english\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`","export default __webpack_public_path__ + \"static/cultura-aada5ce7d235c8b7dbd94a49647187d9.svg\";","export default __webpack_public_path__ + \"static/labs-d738fc677da108e9e889b62f7d70e42a.svg\";"],"names":["iluLabs","require","iluCultura","HeaderContainer","styled","styles","props","type","background","section","HeaderWrapper","InfoContainer","ImageContainer","SectionHeaderSubtitle","color","SectionHeaderTitle","SectionHeaderDescription","SectionHeaderImg","SectionHeaderImgMobile","getHeadStyles","image","title","src","default","subtitle","description","TagsContainer","TagItem","padding","fontWeight","getTagStyles","colors","greenLight","regular","ultraDarkGrey","purpleLight","medium","purpleSecondary","tags","tagsType","map","tag","key","githubIcon","data","CaseWrapper","breakpoints","l","LabImage","Img","m","LabTitle","greenMain","LabDescription","darkMainBg","TagsTitle","BtnContainer","BtnGithub","Button","BtnSite","lab","labData","intl","useIntl","fluid","fluidImg","alt","formatMessage","id","frontmatter","excerpt","Tags","website","theme","isLink","href","btnText","github","PostsMainContainer","PostsContainer","PostsTitle","edges","allMarkdownRemark","Labs","edge","node","childImageSharp","english","locale","Lab","Fragment","SectionHeader"],"sourceRoot":""}