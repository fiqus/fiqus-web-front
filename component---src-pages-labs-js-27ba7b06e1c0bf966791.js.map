{"version":3,"file":"component---src-pages-labs-js-27ba7b06e1c0bf966791.js","mappings":"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","sources":["webpack://fiqus-web/./src/components/common/SectionHeader.js","webpack://fiqus-web/./src/components/common/Tags.js","webpack://fiqus-web/./src/components/modules/Lab.js","webpack://fiqus-web/./src/pages/labs.js"],"sourcesContent":["import React, {useState} from 'react';\nimport {styles} from '../../content/content.json'\nimport styled from 'styled-components'\n\nimport {Waypoint} from 'react-waypoint'\nimport Lottie from 'react-lottie'\n\nimport cultureAnimation from '../../images/animations/cultura.json'\nimport labsAnimation from '../../images/animations/labs.json'\n\nconst iluLabs = require('../../images/illustrations/labs.svg');\nconst iluCultura = require('../../images/illustrations/cultura.svg');\n\n\n\n\nconst setSharedStyles = (type) => {\n    return `\n        font-size: ${type.fontSize};\n        font-weight: ${type.fontWeight};\n        color: ${type.color };\n        background-color: ${type.background};\n        border-color: ${type.borderColor};\n        box-shadow:  0px 4px 0px ${type.boxShadow};\n    `\n} \nconst HeaderContainer = styled.div`\n    background: ${styles.colors.greenLight};\n    padding-bottom: 80px;\n    display: flex; \n    justify-content: center;\n    padding: 40px 20px 50px 20px;\n    margin-bottom: 0px;\n    background: ${props => props.type.background};\n    @media (min-width: ${styles.breakpoints.m}px) {\n        margin-bottom: 0px;\n        padding-top: 55px;\n        padding-bottom: 79px;\n        ${props => {\n            if (props.section === 'cultura') {\n                return  `max-width: 429px;\n                margin-right: 17px;\n                padding-bottom: 45px;`\n            }\n        }}\n    }\n`\nconst HeaderWrapper = styled.div`\n    max-width: 946px;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    @media (min-width: ${styles.breakpoints.m}px) {\n        flex-direction: row;\n        justify-content: center;        \n    }\n\n`\nconst InfoContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n    max-width: 320px;\n    margin: auto;\n    @media (min-width: ${styles.breakpoints.m}px) {\n        flex-basis: 50%;\n        max-width: 463px;\n        align-items: flex-start;\n        margin: 0;\n        margin-right: auto;\n    }\n`\nconst ImageContainer = styled.div`\n    display: none;\n    @media (min-width: ${styles.breakpoints.m}px) {\n        display: block;\n        flex-basis: 50%;\n        max-width: 463px;\n        text-align: right;\n        ${props => {\n            if (props.section === 'cultura') {\n                return  `max-width: 429px;\n                margin-right: 17px;`\n            }\n        }}\n        ${props => {\n            if (props.section === 'labs') {\n                return  `\n                svg {\n                    width: 100%!important;\n                    height: auto!important;\n                }\n                `\n            }\n        }}\n    }\n    @media (min-width: ${styles.breakpoints.m}px) and (max-width: ${styles.breakpoints.l}px){\n        ${props => {\n            if (props.section === 'cultura') {\n                return  `\n                svg {\n                    width: 100%!important;\n                    height: auto!important;\n                }\n                `\n            }\n        }}\n    }\n    \n`\nconst SectionHeaderSubtitle = styled.h2`\n    font-size: 1.44em;\n    font-weight: ${styles.fontWeight.medium};\n    line-height: 34px;\n    color: ${props => props.type.color};\n    margin-bottom: 25px;\n    ${props => {\n        if (props.section === 'cultura') {\n            return  `font-weight: ${styles.fontWeight.regular};`\n        }\n    }}\n    @media (min-width: ${styles.breakpoints.m}px) {\n        margin-bottom: 35px;\n        ${props => {\n            if (props.section === 'cultura') {\n                return  `margin-bottom: 25px;`\n            }\n        }}\n    }\n`\nconst SectionHeaderTitle = styled.h1`\n    font-size: 2.38em;\n    font-weight: ${styles.fontWeight.bold};\n    text-align: center;\n    color: ${props => props.type.color};\n    margin-bottom: 25px;\n    @media (min-width: ${styles.breakpoints.m}px) {\n        font-size: 3em;\n        text-align: left;\n        margin-bottom: 30px;\n        \n    ${props => {\n        if (props.section === 'cultura') {\n            return  `margin-bottom: 8px;`\n        }\n    }}\n    }\n`\nconst SectionHeaderDescription = styled.p`\n    font-size: 1em;\n    line-height: 26px;\n    font-weight: ${styles.fontWeight.regular};\n    color: ${props => props.type.color};\n    \n`\n\nconst SectionHeaderImg = styled.img`\n    margin-top: 83px;\n    @media (min-width: ${styles.breakpoints.m}px) {\n        max-width: 350px;\n    }\n    @media (min-width: ${styles.breakpoints.l}px) {\n        max-width: 463px;\n    }\n    ${props => {\n        if (props.section === 'cultura') {\n            return  `margin-top: 0;\n            @media (min-width: ${styles.breakpoints.m}px) {\n                max-width: 350px;\n            }\n            @media (min-width: ${styles.breakpoints.l}px) {\n                max-width: 429px;\n            }\n            `\n        }\n    }}\n`\nconst SectionHeaderImgMobile = styled.img`\n    width: 100%;\n    max-width: 307px;\n    margin-bottom: 27px;\n    ${props => {\n        if (props.section === 'cultura') {\n            return  `max-width: 320px;`\n        }\n    }}\n    @media (min-width: ${styles.breakpoints.m}px) {\n        display: none;\n    }\n    \n`\n\nconst SectionHeader = (props) => {\n    const [renderLottie, setRenderLottie] = useState(false)\n\n    const getSectionAnimation = (section) => {\n        switch (section) {\n          case \"labs\":\n            return labsAnimation\n            break\n          case \"cultura\":\n            return cultureAnimation\n            break\n        }\n      } \n    \n    const getAnimationOptions = (section) => {\n      return {\n        loop: false,\n        autoplay: true,\n        animationData: getSectionAnimation(section),\n        rendererSettings: {\n          preserveAspectRatio: \"xMidYMid slice\"\n        }\n      }\n    }\n  \n    const getHeadStyles = (type) =>{\n        switch (type) {\n            case \"cultura\" : \n                return {\n                    background : styles.colors.purpleLight,\n                    color : styles.colors.purplePrimary,\n                    image: iluCultura,\n                 }\n            break\n            case \"labs\" : \n                return {\n                    background : styles.colors.greenLight,\n                    color : styles.colors.darkMainBg,\n                    image : iluLabs\n                 }\n            break\n            default : \n                return {\n                    background : styles.colors.greenLight,\n                    color : styles.colors.darkMainBg,\n                    image : iluLabs\n                }\n        }   \n    }\n\n    return (\n        <HeaderContainer type={getHeadStyles(props.section)}>\n            <HeaderWrapper>\n                <InfoContainer>\n                    <SectionHeaderTitle type={getHeadStyles(props.section)}>{props.title}</SectionHeaderTitle>\n                    <SectionHeaderImgMobile src={getHeadStyles(props.section).image.default}></SectionHeaderImgMobile>\n                    <SectionHeaderSubtitle section={props.section} type={getHeadStyles(props.section)}>{props.subtitle}</SectionHeaderSubtitle>\n                    <SectionHeaderDescription type={getHeadStyles(props.section)}> {props.description} </SectionHeaderDescription>\n                </InfoContainer>\n                <ImageContainer section={props.section}>\n                    <Waypoint onEnter={()=>setRenderLottie(true)}/>\n                    { renderLottie && <Lottie\n                        options = {getAnimationOptions(props.section)}\n                        width = \"100%\"/> \n                    }\n                </ImageContainer>\n            </HeaderWrapper>\n        </HeaderContainer>\n    );\n};\n\nexport default SectionHeader;","import React from 'react';\nimport styled from 'styled-components'\n\nconst TagsContainer = styled.div`\n    display: flex;\n    justify-content: flex-start;\n    flex-wrap: wrap;\n`\nconst TagItem = styled.div`\n    margin: 0 6px 8px 0px;\n    padding: ${props => props.type.padding };\n    border-radius: 10px;\n    font-size: 14px;\n    font-weight: ${props => props.type.fontWeight };\n    background-color: ${props => props.type.background };\n    color: ${props => props.type.color };\n`\n\nconst Tags = (props) => {\n\n    const getTagStyles = (type) =>{\n        switch (type) {\n            case \"labs\" : \n                return {\n                    background : props.styles.colors.greenLight, \n                    fontWeight : props.styles.fontWeight.regular, \n                    color : props.styles.colors.ultraDarkGrey,\n                    padding : '9px 14px'\n                 }\n            break\n            case \"services\" : \n                return {\n                    background : props.styles.colors.purpleLight, \n                    fontWeight : props.styles.fontWeight.medium, \n                    color : props.styles.colors.purpleSecondary,\n                    padding : '8px 14px'\n                }\n            break\n            default : \n                return {\n                    background : props.styles.colors.greenLight, \n                    fontWeight : props.styles.fontWeight.regular, \n                    color : props.styles.colors.ultraDarkGrey,\n                    padding : '8px 14px'\n                }\n        }\n    }\n\n    return (\n        <TagsContainer tags={props.tags} type={props.tagsType}>\n            {props.tags.map((tag) => {\n                return (\n                    <TagItem  key = {tag}  type = {getTagStyles(props.tagsType)} styles={props.styles}><p>{ tag }</p></TagItem>\n                )}) \n            }\n        </TagsContainer>\n    );\n};\n\nexport default Tags;","import React from 'react';\nimport styled from 'styled-components'\nimport data from '../../content/content.json'\nimport Img from \"gatsby-image\"\nimport Tags from '../common/Tags'\nimport { useIntl, Link } from \"gatsby-plugin-react-intl\"\nimport Button from '../common/Button'\n\nconst githubIcon = require('../../images/icon_github.svg');\nconst styles = data.styles\n\nconst CaseWrapper = styled.div`\n    margin-bottom: 40px;\n    max-width: 351px;\n    flex-basis: 100%;\n    &:last-of-type {\n        margin-bottom: 96px;\n    }\n    @media (min-width: ${styles.breakpoints.l}px) {\n        flex-basis: 33%;\n        &:last-of-type {\n            margin-bottom: 75px;\n        }\n    }\n` \n\nconst LabImage = styled(Img)`\n    border-radius: 6px;\n    margin-bottom: 15px;\n    height: 182px;\n    @media (min-width: ${styles.breakpoints.m}px) {\n        margin-bottom: 20px;\n    }\n    @media (min-width: ${styles.breakpoints.l}px) {\n        height: 208px;\n    }\n`\nconst LabTitle = styled.h3`\n    font-size: 2.11em;\n    line-height: 42px;\n    color: ${styles.colors.greenMain};\n    margin-bottom: 15px;    \n`\nconst LabDescription =styled.p`\n    font-size: 1em;\n    line-height: 1.22em;\n    padding-bottom: 22px;\n    margin-bottom: 20px;\n    color: ${styles.colors.darkMainBg};\n    border-bottom: 2px solid ${styles.colors.greenLight};\n    @media (min-width: ${styles.breakpoints.l}px) {\n        line-height: 1.44em;\n    }\n`\nconst TagsTitle = styled.h4`\n    margin-bottom: 20px;\n    margin-bottom: 22px;\n    font-size: .88em;\n    font-weight: ${styles.fontWeight.medium};\n    color: ${styles.colors.ultraDarkGrey};\n`\nconst TagsContainer =  styled.div`\n    padding-bottom: 13px;\n    margin-bottom: 20px;\n    border-bottom: 2px solid ${styles.colors.greenLight};\n    @media (min-width: ${styles.breakpoints.l}px) {\n        padding-bottom: 13px;\n    }\n`\nconst BtnContainer =  styled.div`\n    display: flex;\n    flex-wrap: wrap;\n`\nconst BtnGithub =  styled(Button)`\n    font-size: .88em;\n    padding-left: 10px;\n    padding-right: 10px;\n    @media (min-width: ${styles.breakpoints.l}px) {\n        font-size: 1em;\n    }\n`\nconst BtnSite =  styled(Button)`\n    font-size: .88em;\n    padding-left: 10px;\n    padding-right: 10px;\n    @media (min-width: ${styles.breakpoints.l}px) {\n        font-size: 1em;\n    }\n`\n\nconst SuccessCase = (props) => {\n    const lab = props.labData\n    const intl = useIntl();\n\n    return (\n        <CaseWrapper>\n            <LabImage\n                fluid={props.fluidImg}\n                alt={intl.formatMessage({id: \"casos_de_exito.imageAltLine1\"}) + lab.frontmatter.title }\n            />\n            <LabTitle>{lab.frontmatter.title}</LabTitle>\n            <LabDescription>{lab.excerpt}</LabDescription>\n            <TagsTitle>{intl.formatMessage({id: \"casos_de_exito.tagsTitle\"})}</TagsTitle>\n            <TagsContainer>\n                <Tags styles={props.styles} type=\"labs\" tags={lab.frontmatter.tags}></Tags>\n            </TagsContainer>\n            <BtnContainer>\n                { props.labData.frontmatter.website && \n                    <BtnSite\n                        type='btnLabeled'\n                        theme={styles}\n                        isLink\n                        target=\"_blank\"\n                        href={props.labData.frontmatter.website}\n                        btnText={intl.formatMessage({id: \"casos_de_exito.btnTextVerMas\"})}\n                    />\n                }\n                { props.labData.frontmatter.github && \n                    <BtnGithub\n                        type='btnLabeled'\n                        theme={styles}\n                        isLink\n                        src={githubIcon.default}\n                        github={true}\n                        href={props.labData.frontmatter.github}\n                        target=\"_blank\"\n                        btnText={intl.formatMessage({id: \"casos_de_exito.btnTextGithub\"})}\n                    />\n                }\n            </BtnContainer>\n        </CaseWrapper>\n    );\n};\n\nexport default SuccessCase;","import React, {Fragment} from \"react\"\nimport { graphql } from 'gatsby';\nimport styled from 'styled-components'\nimport Lab from \"../components/modules/Lab\"\nimport { useIntl, Link } from \"gatsby-plugin-react-intl\"\nimport SectionHeader from \"../components/common/SectionHeader\"\nimport {styles} from '../content/content.json'\n\nconst PostsMainContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding: 30px 20px 109px 20px;\n  @media (min-width: ${styles.breakpoints.m}px) {\n    padding: 52px 20px 163px 20px;\n  }\n  @media (min-width: ${styles.breakpoints.xl}px) {\n    padding: 52px 0px 168px 0px;\n  }\n`\nconst PostsContainer = styled.div`\n  display: inline-flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 10px;\n  padding: 0;\n  @media (min-width: ${styles.breakpoints.m}px) {\n    max-width: 1140px;\n    justify-content: flex-start;\n    margin: auto;\n    gap: 36px;\n    padding: 0;\n  };\n`\nconst PostsTitle = styled.h2`\n  flex-basis: 100%;\n  font-size: 1.72em;\n  font-weight: ${styles.fontWeight.medium};\n  line-height: 37px;\n  text-align: center;\n  color: ${styles.colors.darkMainBg};\n  margin-bottom: 20px;\n  @media (min-width: ${styles.breakpoints.m}px) {\n    font-size: 2.83em;\n    line-height: 59px;\n    margin-bottom: 24px;\n  }\n`\n\nconst Labs = ({data: {allMarkdownRemark: { edges }}}) => {\n  const intl = useIntl();\n\n  const Labs = edges.map( \n    edge => {\n      const fluidImg = edge.node.frontmatter.image.childImageSharp.fluid \n      const english = edge.node.frontmatter.english;\n\n      if ( (english && intl.locale == 'en') || (!english && intl.locale == 'es')) {\n        return(\n          <Lab key={edge.node.frontmatter.id} fluidImg={fluidImg} styles={styles} labData={edge.node}></Lab>\n        )\n      }      \n    }\n  )\n  \n  return ( \n    <Fragment>\n      <SectionHeader \n        section=\"labs\"\n        title={intl.formatMessage({id: 'labs.title'})}\n        subtitle={intl.formatMessage({id: 'labs.subtitle'})}\n        description={intl.formatMessage({id: 'labs.content'})}\n      />\n      <PostsMainContainer>\n        <PostsContainer>\n          <PostsTitle>{intl.formatMessage({id: 'casos_de_exito.title'})}</PostsTitle>\n          {Labs}\n        </PostsContainer>\n      </PostsMainContainer>\n    \n    </Fragment>\n  )\n\n};\n\nexport default Labs;\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }, filter: {frontmatter: {type: {eq: \"lab\"}}}) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            type\n            date(formatString: \"MMMM DD, YYYY\")\n            id\n            title\n            tags\n            image{\n              childImageSharp {\n                fluid(maxWidth: 1500, quality: 50) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            website\n            github\n            english\n          }\n        }\n      }\n    }\n  }\n`"],"names":["iluLabs","require","iluCultura","HeaderContainer","styled","styles","props","type","background","section","HeaderWrapper","InfoContainer","ImageContainer","SectionHeaderSubtitle","color","SectionHeaderTitle","SectionHeaderDescription","SectionHeaderImgMobile","useState","renderLottie","setRenderLottie","getSectionAnimation","labsAnimation","cultureAnimation","getHeadStyles","image","title","src","default","subtitle","description","onEnter","options","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","width","TagsContainer","TagItem","padding","fontWeight","getTagStyles","colors","greenLight","regular","ultraDarkGrey","purpleLight","medium","purpleSecondary","tags","tagsType","map","tag","key","githubIcon","data","CaseWrapper","breakpoints","l","LabImage","Img","m","LabTitle","greenMain","LabDescription","darkMainBg","TagsTitle","BtnContainer","BtnGithub","Button","BtnSite","lab","labData","intl","useIntl","fluid","fluidImg","alt","formatMessage","id","frontmatter","excerpt","Tags","website","theme","isLink","target","href","btnText","github","PostsMainContainer","PostsContainer","PostsTitle","edges","allMarkdownRemark","Labs","edge","node","childImageSharp","english","locale","Lab","Fragment","SectionHeader"],"sourceRoot":""}